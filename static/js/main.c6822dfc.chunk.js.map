{"version":3,"sources":["styles.ts","NewItemForm.tsx","utils/useFocus.ts","AddNewItem.tsx","utils/arrayUtils.ts","state/AppStateReducer.ts","state/AppStateContext.tsx","state/actions.ts","utils/useItemDrag.ts","utils/isHidden.ts","Card.tsx","Column.tsx","CustomDragLayer.tsx","App.tsx","index.tsx"],"names":["DragPreviewContainer","styled","div","props","isPreview","undefined","isHidden","AppContainer","ColumnContainer","ColumnTitle","CardContainer","AddItemButton","button","dark","NewItemFormContainer","NewItemButton","NewItemInput","input","CustomDragLayerContainer","DragPreviewWrapper","attrs","position","x","y","style","transform","NewItemForm","onAdd","useState","text","setText","inputRef","ref","useRef","useEffect","current","focus","useFocus","value","onChange","e","target","onKeyPress","event","key","onClick","AddNewItem","showForm","setShowForm","toggleButtonText","findItemIndexById","items","id","findIndex","item","moveItem","array","from","to","index","slice","insertItemAtIndex","removeItemAtIndex","appStateReducer","draft","action","type","lists","push","nanoid","payload","tasks","listId","targetListIndex","draggedItemId","hoveredItemId","sourceColumnId","targetColumnId","sourceListIndex","dragIndex","hoverIndex","splice","draggedId","hoverId","draggedItem","appData","AppStateContext","createContext","AppStateProvider","children","useImmerReducer","state","dispatch","Provider","getTasksByListId","find","list","useAppState","useContext","setDraggedItem","moveTask","useItemDrag","useDrag","end","drag","preview","getEmptyImage","captureDraggingState","itemType","Boolean","Card","columnId","useDrop","accept","hover","drop","Column","length","map","task","addTask","CustomDragLayer","currentOffset","useDragLayer","monitor","getSourceClientOffset","App","addList","ReactDOM","render","StrictMode","DndProvider","backend","Backend","document","getElementById"],"mappings":"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","file":"static/js/main.c6822dfc.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\ntype AddItemButtonProps = {\n  dark?: boolean;\n};\n\ntype DragPreviewWrapperProps = {\n  position: {\n    x: number;\n    y: number;\n  };\n};\n\ninterface DragPreviewContainerProps {\n  isHidden?: boolean;\n  isPreview?: boolean;\n}\n\nexport const DragPreviewContainer = styled.div<DragPreviewContainerProps>`\n  transform: ${(props) => (props.isPreview ? \"rotate(5deg)\" : undefined)};\n  opacity: ${(props) => (props.isHidden ? 0 : 1)};\n`;\n\nexport const AppContainer = styled.div`\n  align-items: flex-start;\n  background-color: #3179ba;\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  padding: 20px;\n  width: 100%;\n`;\n\nexport const ColumnContainer = styled(DragPreviewContainer)`\n  background-color: #ebecf0;\n  width: 300px;\n  min-height: 40px;\n  margin-right: 20px;\n  border-radius: 3px;\n  padding: 8px 8px;\n  flex-grow: 0;\n`;\n\nexport const ColumnTitle = styled.div`\n  padding: 6px 16px 12px;\n  font-weight: bold;\n`;\n\nexport const CardContainer = styled(DragPreviewContainer)`\n  background-color: #fff;\n  cursor: pointer;\n  margin-bottom: 0.5rem;\n  padding: 0.5rem 1rem;\n  max-width: 300px;\n  border-radius: 3px;\n  box-shadow: #091e4240 0px 1px 0px 0px;\n`;\n\nexport const AddItemButton = styled.button<AddItemButtonProps>`\n  background-color: #ffffff3d;\n  border-radius: 3px;\n  border: none;\n  color: ${(props) => (props.dark ? \"#000\" : \"#fff\")};\n  cursor: pointer;\n  max-width: 300px;\n  padding: 10px 12px;\n  text-align: left;\n  transition: background 85ms ease-in;\n  width: 100%;\n  &:hover {\n    background-color: #ffffff52;\n  }\n`;\n\nexport const NewItemFormContainer = styled.div`\n  max-width: 300px;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-items: flex-start;\n`;\n\nexport const NewItemButton = styled.button`\n  background-color: #5aac44;\n  border-radius: 3px;\n  border: none;\n  box-shadow: none;\n  color: #fff;\n  padding: 6px 12px;\n  text-align: center;\n`;\n\nexport const NewItemInput = styled.input`\n  border-radius: 3px;\n  border: none;\n  box-shadow: #091e4240 0px 1px 0px 0px;\n  margin-bottom: 0.5rem;\n  padding: 0.5rem 1rem;\n  width: 100%;\n`;\n\nexport const CustomDragLayerContainer = styled.div`\n  height: 100%;\n  left: 0;\n  pointer-events: none;\n  position: fixed;\n  top: 0;\n  width: 100%;\n  z-index: 100;\n`;\n\nexport const DragPreviewWrapper = styled.div.attrs<DragPreviewWrapperProps>(\n  ({ position: { x, y } }) => ({\n    style: {\n      transform: `translate(${x}px, ${y}px)`,\n    },\n  })\n)<DragPreviewWrapperProps>``;\n","import { useState } from \"react\";\nimport { NewItemFormContainer, NewItemButton, NewItemInput } from \"./styles\";\nimport { useFocus } from \"./utils/useFocus\";\n\ntype NewItemFormProps = {\n  onAdd(text: string): void;\n};\n\nexport const NewItemForm = ({ onAdd }: NewItemFormProps) => {\n  const [text, setText] = useState(\"\");\n  const inputRef = useFocus();\n\n  const handleAddText = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      onAdd(text);\n    }\n  };\n\n  return (\n    <NewItemFormContainer>\n      <NewItemInput\n        ref={inputRef}\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n        onKeyPress={handleAddText}\n      />\n      <NewItemButton onClick={() => onAdd(text)}>Create</NewItemButton>\n    </NewItemFormContainer>\n  );\n};\n","import { useRef, useEffect } from \"react\";\n\nexport const useFocus = () => {\n  const ref = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    ref.current?.focus();\n  }, []);\n\n  return ref;\n};\n","import { useState } from \"react\";\nimport { AddItemButton } from \"./styles\";\nimport { NewItemForm } from \"./NewItemForm\";\n\ntype AddNewItemProps = {\n  onAdd(text: string): void;\n  toggleButtonText: string;\n  dark?: boolean;\n};\n\nexport const AddNewItem = (props: AddNewItemProps) => {\n  const [showForm, setShowForm] = useState(false);\n  const { onAdd, toggleButtonText, dark } = props;\n  if (showForm) {\n    return (\n      <NewItemForm\n        onAdd={(text) => {\n          onAdd(text);\n          setShowForm(false);\n        }}\n      />\n    );\n  }\n  return (\n    <AddItemButton dark={dark} onClick={() => setShowForm(true)}>\n      {toggleButtonText}\n    </AddItemButton>\n  );\n};\n","type Item = {\n  id: string;\n};\n\nexport const findItemIndexById = <TItem extends Item>(\n  items: TItem[],\n  id: string\n) => {\n  return items.findIndex((item: TItem) => item.id === id);\n};\n\nexport const moveItem = <TItem>(array: TItem[], from: number, to: number) => {\n  const item = array[from];\n  return insertItemAtIndex(removeItemAtIndex(array, from), item, to);\n};\n\nexport function removeItemAtIndex<TItem>(array: TItem[], index: number) {\n  return [...array.slice(0, index), ...array.slice(index + 1)];\n}\n\nexport function insertItemAtIndex<TItem>(\n  array: TItem[],\n  item: TItem,\n  index: number\n) {\n  return [...array.slice(0, index), item, ...array.slice(index)];\n}\n","import { Action } from \"./actions\";\nimport { nanoid } from \"nanoid\";\nimport { findItemIndexById, moveItem } from \"../utils/arrayUtils\";\nimport { DragItem } from \"../DragItem\";\n\nexport type Task = {\n  id: string;\n  text: string;\n};\nexport type List = {\n  id: string;\n  text: string;\n  tasks: Task[];\n};\nexport type AppState = {\n  lists: List[];\n  draggedItem: DragItem | null;\n};\n\nexport const appStateReducer = (\n  draft: AppState,\n  action: Action\n): AppState | void => {\n  switch (action.type) {\n    case \"ADD_LIST\": {\n      draft.lists.push({\n        id: nanoid(),\n        text: action.payload,\n        tasks: [],\n      });\n      break;\n    }\n    case \"ADD_TASK\": {\n      const { text, listId } = action.payload;\n      const targetListIndex = findItemIndexById(draft.lists, listId);\n      draft.lists[targetListIndex].tasks.push({\n        id: nanoid(),\n        text,\n      });\n      break;\n    }\n    case \"MOVE_TASK\": {\n      const { draggedItemId, hoveredItemId, sourceColumnId, targetColumnId } =\n        action.payload;\n      const sourceListIndex = findItemIndexById(draft.lists, sourceColumnId);\n      const targetListIndex = findItemIndexById(draft.lists, targetColumnId);\n      const dragIndex = findItemIndexById(\n        draft.lists[sourceListIndex].tasks,\n        draggedItemId\n      );\n      const hoverIndex = hoveredItemId\n        ? findItemIndexById(draft.lists[targetListIndex].tasks, hoveredItemId)\n        : 0;\n      const item = draft.lists[sourceListIndex].tasks[dragIndex];\n\n      // Remove the task from the source list\n      draft.lists[sourceListIndex].tasks.splice(dragIndex, 1);\n      // Add the task to the target list\n      draft.lists[targetListIndex].tasks.splice(hoverIndex, 0, item);\n      break;\n    }\n    case \"MOVE_LIST\": {\n      const { draggedId, hoverId } = action.payload;\n      const dragIndex = findItemIndexById(draft.lists, draggedId);\n      const hoverIndex = findItemIndexById(draft.lists, hoverId);\n      draft.lists = moveItem(draft.lists, dragIndex, hoverIndex);\n      break;\n    }\n    case \"SET_DRAGGED_ITEM\": {\n      draft.draggedItem = action.payload;\n      break;\n    }\n\n    default: {\n      return draft;\n    }\n  }\n};\n","import { createContext, useContext, Dispatch, FC, ReactNode } from \"react\";\nimport { useImmerReducer } from \"use-immer\";\nimport { DragItem } from \"../DragItem\";\nimport { appStateReducer, AppState, List, Task } from \"./AppStateReducer\";\nimport { Action } from \"./actions\";\n\nconst appData: AppState = {\n  draggedItem: null,\n  lists: [\n    {\n      id: \"0\",\n      text: \"To Do\",\n      tasks: [{ id: \"c0\", text: \"Generate app scaffold\" }],\n    },\n    {\n      id: \"1\",\n      text: \"In Progress\",\n      tasks: [{ id: \"c2\", text: \"Learn Typescript\" }],\n    },\n    {\n      id: \"2\",\n      text: \"Done\",\n      tasks: [{ id: \"c3\", text: \"Begin to use static typing\" }],\n    },\n  ],\n};\n\ntype AppStateContextProps = {\n  draggedItem: DragItem | null;\n  lists: List[];\n  getTasksByListId(id: string): Task[];\n  dispatch: Dispatch<Action>;\n};\n\ntype providerStateProps = {\n  children?: ReactNode;\n};\n\nconst AppStateContext = createContext<AppStateContextProps>(\n  {} as AppStateContextProps\n);\n\nexport const AppStateProvider: FC<providerStateProps> = ({ children }) => {\n  const [state, dispatch] = useImmerReducer(appStateReducer, appData);\n  const { draggedItem, lists } = state;\n  const getTasksByListId = (id: string) => {\n    return lists.find((list) => list.id === id)?.tasks || [];\n  };\n  return (\n    <AppStateContext.Provider\n      value={{ lists, getTasksByListId, dispatch, draggedItem }}\n    >\n      {children}\n    </AppStateContext.Provider>\n  );\n};\n\nexport const useAppState = () => {\n  return useContext(AppStateContext);\n};\n","import { DragItem } from \"../DragItem\";\nexport type Action =\n  | {\n      type: \"ADD_LIST\";\n      payload: string;\n    }\n  | {\n      type: \"ADD_TASK\";\n      payload: { text: string; listId: string };\n    }\n  | {\n      type: \"MOVE_LIST\";\n      payload: {\n        draggedId: string;\n        hoverId: string;\n      };\n    }\n  | {\n      type: \"SET_DRAGGED_ITEM\";\n      payload: DragItem | null;\n    }\n  | {\n      type: \"MOVE_TASK\";\n      payload: {\n        draggedItemId: string;\n        hoveredItemId: string | null;\n        sourceColumnId: string;\n        targetColumnId: string;\n      };\n    };\n\nexport const addTask = (text: string, listId: string): Action => ({\n  type: \"ADD_TASK\",\n  payload: {\n    text,\n    listId,\n  },\n});\nexport const addList = (text: string): Action => ({\n  type: \"ADD_LIST\",\n  payload: text,\n});\n\nexport const moveList = (draggedId: string, hoverId: string): Action => ({\n  type: \"MOVE_LIST\",\n  payload: {\n    draggedId,\n    hoverId,\n  },\n});\n\nexport const setDraggedItem = (draggedItem: DragItem | null): Action => ({\n  type: \"SET_DRAGGED_ITEM\",\n  payload: draggedItem,\n});\n\nexport const moveTask = (\n  draggedItemId: string,\n  hoveredItemId: string | null,\n  sourceColumnId: string,\n  targetColumnId: string\n): Action => ({\n  type: \"MOVE_TASK\",\n  payload: {\n    draggedItemId,\n    hoveredItemId,\n    sourceColumnId,\n    targetColumnId,\n  },\n});\n","import { useEffect } from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport { useAppState } from \"../state/AppStateContext\";\nimport { DragItem } from \"../DragItem\";\nimport { setDraggedItem } from \"../state/actions\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nexport const useItemDrag = (item: DragItem) => {\n  const { dispatch } = useAppState();\n  const [, drag, preview] = useDrag({\n    type: item.type,\n    item: () => {\n      dispatch(setDraggedItem(item));\n      return item;\n    },\n    end: () => dispatch(setDraggedItem(null)),\n  });\n  useEffect(() => {\n    preview(getEmptyImage(), { captureDraggingState: true });\n  }, [preview]);\n\n  return { drag };\n};\n","import { DragItem } from \"../DragItem\";\n\nexport const isHidden = (\n  draggedItem: DragItem | null,\n  itemType: string,\n  id: string,\n  isPreview?: boolean\n): boolean => {\n  return Boolean(\n    !isPreview &&\n      draggedItem &&\n      draggedItem.type === itemType &&\n      draggedItem.id === id\n  );\n};\n","import { useRef } from \"react\";\nimport { CardContainer } from \"./styles\";\nimport { useItemDrag } from \"./utils/useItemDrag\";\nimport { useDrop } from \"react-dnd\";\nimport { useAppState } from \"./state/AppStateContext\";\nimport { isHidden } from \"./utils/isHidden\";\nimport { moveTask, setDraggedItem } from \"./state/actions\";\n\ntype CardProps = {\n  text: string;\n  id: string;\n  columnId: string;\n  isPreview?: boolean;\n};\n\nexport const Card = ({ text, id, columnId, isPreview }: CardProps) => {\n  const { draggedItem, dispatch } = useAppState();\n  const ref = useRef<HTMLDivElement>(null);\n  const { drag } = useItemDrag({\n    type: \"CARD\",\n    id,\n    text,\n    columnId,\n  });\n  const [, drop] = useDrop({\n    accept: \"CARD\",\n    hover() {\n      if (!draggedItem) {\n        return;\n      }\n      if (draggedItem.type !== \"CARD\") {\n        return;\n      }\n      if (draggedItem.id === id) {\n        return;\n      }\n      dispatch(moveTask(draggedItem.id, id, draggedItem.columnId, columnId));\n    },\n  });\n\n  drag(drop(ref));\n\n  return (\n    <CardContainer\n      isHidden={isHidden(draggedItem, \"CARD\", id, isPreview)}\n      isPreview={isPreview}\n      ref={ref}\n    >\n      {text}\n    </CardContainer>\n  );\n};\n","import { AddNewItem } from \"./AddNewItem\";\nimport { ColumnContainer, ColumnTitle } from \"./styles\";\nimport { useAppState } from \"./state/AppStateContext\";\nimport { Card } from \"./Card\";\nimport { useRef } from \"react\";\nimport { addTask, moveTask, moveList, setDraggedItem } from \"./state/actions\";\nimport { DragItem } from \"./DragItem\";\nimport { useItemDrag } from \"./utils/useItemDrag\";\nimport { useDrop } from \"react-dnd\";\nimport { isHidden } from \"./utils/isHidden\";\n\ntype ColumnProps = {\n  text: string;\n  id: string;\n  isPreview?: boolean;\n};\n\nexport const Column = ({ text, id, isPreview }: ColumnProps) => {\n  const { draggedItem, getTasksByListId, dispatch } = useAppState();\n  const tasks = getTasksByListId(id);\n  const ref = useRef<HTMLDivElement>(null);\n  const { drag } = useItemDrag({ type: \"COLUMN\", id, text });\n\n  const [, drop] = useDrop({\n    accept: [\"COLUMN\", \"CARD\"],\n    hover(item: DragItem) {\n      if (!draggedItem) {\n        return;\n      }\n      if (draggedItem.type === \"COLUMN\") {\n        if (draggedItem.id === id) {\n          return;\n        }\n        dispatch(moveList(draggedItem.id, id));\n      } else {\n        if (draggedItem.columnId === id) {\n          return;\n        }\n        if (tasks.length) {\n          return;\n        }\n        dispatch(moveTask(draggedItem.id, null, draggedItem.columnId, id));\n        dispatch(setDraggedItem({ ...draggedItem, columnId: id }));\n      }\n    },\n  });\n  drag(drop(ref));\n\n  drag(ref);\n  return (\n    <ColumnContainer\n      isPreview={isPreview}\n      ref={ref}\n      isHidden={isHidden(draggedItem, \"COLUMN\", id, isPreview)}\n    >\n      <ColumnTitle>{text}</ColumnTitle>\n      {tasks.map((task) => (\n        <Card id={task.id} columnId={id} text={task.text} key={task.id} />\n      ))}\n      <AddNewItem\n        toggleButtonText=\"+ Add another card\"\n        onAdd={(text) => dispatch(addTask(text, id))}\n        dark\n      />\n    </ColumnContainer>\n  );\n};\n","import { useDragLayer } from \"react-dnd\";\nimport { Column } from \"./Column\";\nimport { Card } from \"./Card\";\nimport { CustomDragLayerContainer, DragPreviewWrapper } from \"./styles\";\n\nimport { useAppState } from \"./state/AppStateContext\";\n\nexport const CustomDragLayer = () => {\n  const { draggedItem } = useAppState();\n  const { currentOffset } = useDragLayer((monitor) => ({\n    currentOffset: monitor.getSourceClientOffset(),\n  }));\n  return draggedItem && currentOffset ? (\n    <CustomDragLayerContainer>\n      <DragPreviewWrapper position={currentOffset}>\n        {draggedItem.type === \"COLUMN\" ? (\n          <Column id={draggedItem.id} text={draggedItem.text} isPreview />\n        ) : (\n          <Card\n            columnId={draggedItem.columnId}\n            isPreview\n            id={draggedItem.id}\n            text={draggedItem.text}\n          />\n        )}\n      </DragPreviewWrapper>\n    </CustomDragLayerContainer>\n  ) : null;\n};\n","import { AppContainer } from \"./styles\";\nimport { AddNewItem } from \"./AddNewItem\";\nimport { Column } from \"./Column\";\nimport { useAppState } from \"./state/AppStateContext\";\nimport { CustomDragLayer } from \"./CustomDragLayer\";\nimport { addList } from \"./state/actions\";\n\nexport const App = () => {\n  const { lists, dispatch } = useAppState();\n  return (\n    <AppContainer>\n      <CustomDragLayer />\n      {lists.map((list) => (\n        <Column id={list.id} text={list.text} key={list.id} />\n      ))}\n      <AddNewItem\n        toggleButtonText=\"+ Add another list\"\n        onAdd={(text) => dispatch(addList(text))}\n      />\n    </AppContainer>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend as Backend } from \"react-dnd-html5-backend\";\nimport { AppStateProvider } from \"./state/AppStateContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <DndProvider backend={Backend}>\n      <AppStateProvider>\n        <App />\n      </AppStateProvider>\n    </DndProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}